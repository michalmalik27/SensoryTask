// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SensoryTask.Models;

namespace SensoryTask.Migrations
{
    [DbContext(typeof(SensoryTaskContext))]
    partial class SensoryTaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SensoryTask.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("IdNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SensoryTask.Models.Profession", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProfessionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProfessionId");

                    b.ToTable("Professions");

                    b.HasData(
                        new
                        {
                            ProfessionId = 1,
                            ProfessionName = "Unemployed"
                        },
                        new
                        {
                            ProfessionId = 2,
                            ProfessionName = "Programmer"
                        },
                        new
                        {
                            ProfessionId = 3,
                            ProfessionName = "Gardener"
                        },
                        new
                        {
                            ProfessionId = 4,
                            ProfessionName = "Teacher"
                        },
                        new
                        {
                            ProfessionId = 5,
                            ProfessionName = "Cashier"
                        });
                });

            modelBuilder.Entity("SensoryTask.Models.Person", b =>
                {
                    b.HasOne("SensoryTask.Models.Profession", "Profession")
                        .WithMany("Persons")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("SensoryTask.Models.Profession", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
